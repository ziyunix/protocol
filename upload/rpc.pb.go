// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: ziyunix/protocol/upload/rpc.proto

package upload

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_ziyunix_protocol_upload_rpc_proto protoreflect.FileDescriptor

var file_ziyunix_protocol_upload_rpc_proto_rawDesc = []byte{
	0x0a, 0x21, 0x7a, 0x69, 0x79, 0x75, 0x6e, 0x69, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x17, 0x7a, 0x69, 0x79, 0x75, 0x6e, 0x69, 0x78, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x21, 0x7a, 0x69,
	0x79, 0x75, 0x6e, 0x69, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x61, 0x64, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x26, 0x7a, 0x69, 0x79, 0x75, 0x6e, 0x69, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x7a, 0x69, 0x79, 0x75, 0x6e, 0x69, 0x78,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x2f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x7a, 0x69,
	0x79, 0x75, 0x6e, 0x69, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x32, 0xd5, 0x02, 0x0a, 0x03, 0x52, 0x70, 0x63, 0x12, 0x49, 0x0a, 0x03,
	0x41, 0x64, 0x64, 0x12, 0x1f, 0x2e, 0x7a, 0x69, 0x79, 0x75, 0x6e, 0x69, 0x78, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x7a, 0x69, 0x79, 0x75, 0x6e, 0x69, 0x78, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x41,
	0x64, 0x64, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x08, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x7a, 0x69, 0x79, 0x75, 0x6e, 0x69, 0x78, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x7a, 0x69, 0x79, 0x75,
	0x6e, 0x69, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x05, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x2e, 0x7a, 0x69, 0x79,
	0x75, 0x6e, 0x69, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x7a, 0x69, 0x79, 0x75, 0x6e, 0x69, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x58, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x24,
	0x2e, 0x7a, 0x69, 0x79, 0x75, 0x6e, 0x69, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x7a, 0x69, 0x79, 0x75, 0x6e, 0x69, 0x78, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x53, 0x0a, 0x24,
	0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x79, 0x75, 0x6e, 0x69, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x01, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x79, 0x75, 0x6e, 0x69, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x3b, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_ziyunix_protocol_upload_rpc_proto_goTypes = []interface{}{
	(*AddReq)(nil),      // 0: ziyunix.protocol.upload.AddReq
	(*InitiateReq)(nil), // 1: ziyunix.protocol.upload.InitiateReq
	(*AbortReq)(nil),    // 2: ziyunix.protocol.upload.AbortReq
	(*CompleteReq)(nil), // 3: ziyunix.protocol.upload.CompleteReq
	(*AddRsp)(nil),      // 4: ziyunix.protocol.upload.AddRsp
	(*InitiateRsp)(nil), // 5: ziyunix.protocol.upload.InitiateRsp
	(*AbortRsp)(nil),    // 6: ziyunix.protocol.upload.AbortRsp
	(*CompleteRsp)(nil), // 7: ziyunix.protocol.upload.CompleteRsp
}
var file_ziyunix_protocol_upload_rpc_proto_depIdxs = []int32{
	0, // 0: ziyunix.protocol.upload.Rpc.Add:input_type -> ziyunix.protocol.upload.AddReq
	1, // 1: ziyunix.protocol.upload.Rpc.Initiate:input_type -> ziyunix.protocol.upload.InitiateReq
	2, // 2: ziyunix.protocol.upload.Rpc.Abort:input_type -> ziyunix.protocol.upload.AbortReq
	3, // 3: ziyunix.protocol.upload.Rpc.Complete:input_type -> ziyunix.protocol.upload.CompleteReq
	4, // 4: ziyunix.protocol.upload.Rpc.Add:output_type -> ziyunix.protocol.upload.AddRsp
	5, // 5: ziyunix.protocol.upload.Rpc.Initiate:output_type -> ziyunix.protocol.upload.InitiateRsp
	6, // 6: ziyunix.protocol.upload.Rpc.Abort:output_type -> ziyunix.protocol.upload.AbortRsp
	7, // 7: ziyunix.protocol.upload.Rpc.Complete:output_type -> ziyunix.protocol.upload.CompleteRsp
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ziyunix_protocol_upload_rpc_proto_init() }
func file_ziyunix_protocol_upload_rpc_proto_init() {
	if File_ziyunix_protocol_upload_rpc_proto != nil {
		return
	}
	file_ziyunix_protocol_upload_add_proto_init()
	file_ziyunix_protocol_upload_initiate_proto_init()
	file_ziyunix_protocol_upload_abort_proto_init()
	file_ziyunix_protocol_upload_complete_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ziyunix_protocol_upload_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ziyunix_protocol_upload_rpc_proto_goTypes,
		DependencyIndexes: file_ziyunix_protocol_upload_rpc_proto_depIdxs,
	}.Build()
	File_ziyunix_protocol_upload_rpc_proto = out.File
	file_ziyunix_protocol_upload_rpc_proto_rawDesc = nil
	file_ziyunix_protocol_upload_rpc_proto_goTypes = nil
	file_ziyunix_protocol_upload_rpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RpcClient is the client API for Rpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcClient interface {
	// 创建一个上传
	Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddRsp, error)
	// 初始化分片上传
	Initiate(ctx context.Context, in *InitiateReq, opts ...grpc.CallOption) (*InitiateRsp, error)
	// 取消上传
	Abort(ctx context.Context, in *AbortReq, opts ...grpc.CallOption) (*AbortRsp, error)
	// 完成上传
	Complete(ctx context.Context, in *CompleteReq, opts ...grpc.CallOption) (*CompleteRsp, error)
}

type rpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcClient(cc grpc.ClientConnInterface) RpcClient {
	return &rpcClient{cc}
}

func (c *rpcClient) Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddRsp, error) {
	out := new(AddRsp)
	err := c.cc.Invoke(ctx, "/ziyunix.protocol.upload.Rpc/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) Initiate(ctx context.Context, in *InitiateReq, opts ...grpc.CallOption) (*InitiateRsp, error) {
	out := new(InitiateRsp)
	err := c.cc.Invoke(ctx, "/ziyunix.protocol.upload.Rpc/Initiate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) Abort(ctx context.Context, in *AbortReq, opts ...grpc.CallOption) (*AbortRsp, error) {
	out := new(AbortRsp)
	err := c.cc.Invoke(ctx, "/ziyunix.protocol.upload.Rpc/Abort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) Complete(ctx context.Context, in *CompleteReq, opts ...grpc.CallOption) (*CompleteRsp, error) {
	out := new(CompleteRsp)
	err := c.cc.Invoke(ctx, "/ziyunix.protocol.upload.Rpc/Complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcServer is the server API for Rpc service.
type RpcServer interface {
	// 创建一个上传
	Add(context.Context, *AddReq) (*AddRsp, error)
	// 初始化分片上传
	Initiate(context.Context, *InitiateReq) (*InitiateRsp, error)
	// 取消上传
	Abort(context.Context, *AbortReq) (*AbortRsp, error)
	// 完成上传
	Complete(context.Context, *CompleteReq) (*CompleteRsp, error)
}

// UnimplementedRpcServer can be embedded to have forward compatible implementations.
type UnimplementedRpcServer struct {
}

func (*UnimplementedRpcServer) Add(context.Context, *AddReq) (*AddRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedRpcServer) Initiate(context.Context, *InitiateReq) (*InitiateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initiate not implemented")
}
func (*UnimplementedRpcServer) Abort(context.Context, *AbortReq) (*AbortRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}
func (*UnimplementedRpcServer) Complete(context.Context, *CompleteReq) (*CompleteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}

func RegisterRpcServer(s *grpc.Server, srv RpcServer) {
	s.RegisterService(&_Rpc_serviceDesc, srv)
}

func _Rpc_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ziyunix.protocol.upload.Rpc/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Add(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_Initiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Initiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ziyunix.protocol.upload.Rpc/Initiate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Initiate(ctx, req.(*InitiateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ziyunix.protocol.upload.Rpc/Abort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Abort(ctx, req.(*AbortReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ziyunix.protocol.upload.Rpc/Complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Complete(ctx, req.(*CompleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ziyunix.protocol.upload.Rpc",
	HandlerType: (*RpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Rpc_Add_Handler,
		},
		{
			MethodName: "Initiate",
			Handler:    _Rpc_Initiate_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _Rpc_Abort_Handler,
		},
		{
			MethodName: "Complete",
			Handler:    _Rpc_Complete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ziyunix/protocol/upload/rpc.proto",
}
